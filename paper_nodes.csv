paper_id:ID(Paper),title,year:INT,abstract,doi
033275ccc2c7c5c38592ae893da0b5923cf90717,Neural Graph Reasoning: Complex Logical Query Answering Meets Graph Databases,2023,"Complex logical query answering (CLQA) is a recently emerged task of graph machine learning that goes beyond simple one-hop link prediction and solves a far more complex task of multi-hop logical reasoning over massive, potentially incomplete graphs in a latent space. The task received a significant traction in the community; numerous works expanded the field along theoretical and practical axes to tackle different types of complex queries and graph modalities with efficient systems. In this paper, we provide a holistic survey of CLQA with a detailed taxonomy studying the field from multiple angles, including graph types (modality, reasoning domain, background semantics), modeling aspects (encoder, processor, decoder), supported queries (operators, patterns, projected variables), datasets, evaluation metrics, and applications. Refining the CLQA task, we introduce the concept of Neural Graph Databases (NGDBs). Extending the idea of graph databases (graph DBs), NGDB consists of a Neural Graph Storage and a Neural Graph Engine. Inside Neural Graph Storage, we design a graph store, a feature store, and further embed information in a latent embedding store using an encoder. Given a query, Neural Query Engine learns how to perform query planning and execution in order to efficiently retrieve the correct results by interacting with the Neural Graph Storage. Compared with traditional graph DBs, NGDBs allow for a flexible and unified modeling of features in diverse modalities using the embedding store. Moreover, when the graph is incomplete, they can provide robust retrieval of answers which a normal graph DB cannot recover. Finally, we point out promising directions, unsolved problems and applications of NGDB for future research.",10.48550/arXiv.2303.14617
459cf4e6476d5e19f1bc422c162bcded54ca7f95,"Experimental Evaluation of Graph Databases: JanusGraph, Nebula Graph, Neo4j, and TigerGraph",2023,"NoSQL databases were created with the primary goal of addressing the shortcomings in the efficiency of relational databases, and can be of four types: document, column, key-value, and graph databases. Graph databases can store data and relationships efficiently, and have a flexible and easy-to-understand data schema. In this paper, we perform an experimental evaluation of the four most popular graph databases: JanusGraph, Nebula Graph, Neo4j, and TigerGraph. Database performance is evaluated using the Linked Data Benchmark Council’s Social Network Benchmark (LDBC SNB). In the experiments, we analyze the execution time of the queries, the loading time of the nodes and the RAM and CPU usage for each database. In our analysis, Neo4j was the graph database with the best performance across all metrics.",10.3390/app13095770
4340043a5a43f1863e080e3fc717f863ad21b51d,Graph Databases,2023,,10.1201/9781003183532
1a85628dd645ea86b7c146613651fdb30bb32c1d,The World of Graph Databases from An Industry Perspective,2022,"Rapidly growing social networks and other graph data have created a high demand for graph technologies in the market. A plethora of graph databases, systems, and solutions have emerged, as a result. On the other hand, graph has long been a well studied area in the database research community. Despite the numerous surveys on various graph research topics, there is a lack of survey on graph technologies from an industry perspective. The purpose of this paper is to provide the research community with an industrial perspective on the graph database landscape, so that graph researcher can better understand the industry trend and the challenges that the industry is facing, and work on solutions to help address these problems.",10.1145/3582302.3582320
5abf79226a8ffa2dcf33ca98bfc36c8bb01cc4fc,Multilayer graphs: a unified data model for graph databases,2022,"In this short position paper, we argue that there is a need for a unifying data model that can support popular graph formats such as RDF, RDF* and property graphs, while at the same time being powerful enough to naturally store information from complex knowledge graphs, such as Wikidata, without the need for a complex reification scheme. Our proposal, called the multilayer graph model, presents a simple and flexible data model for graphs that can naturally support all of the above, and more. We also observe that the idea of multilayer graphs has appeared in existing graph systems from different vendors and research groups, illustrating its versatility.",10.1145/3534540.3534696
59078a26c42e8609244f1c3e01f05af74a3773bf,Inference of Shape Graphs for Graph Databases,2022,"We investigate the problem of constructing a shape graph that describes the structure of a given graph database. We employ the framework of grammatical inference , where the objective is to find an inference algorithm that is both sound , i.e., always producing a schema that validates the input graph, and complete , i.e., able to produce any schema, within a given class of schemas, provided that a sufficiently informative input graph is presented. We identify a number of fundamental limitations that preclude feasible inference. We present inference algorithms based on natural approaches that allow to infer schemas that we argue to be of practical importance.",10.4230/LIPIcs.ICDT.2022.14
1cbbe1a129c0d1f53d8e16ca74238334372507dc,Neural Graph Databases,2022,"Graph databases (GDBs) enable processing and analysis of unstructured, complex, rich, and usually vast graph datasets. Despite the large significance of GDBs in both academia and industry, little effort has been made into integrating them with the predictive power of graph neural networks (GNNs). In this work, we show how to seamlessly combine nearly any GNN model with the computational capabilities of GDBs. For this, we observe that the majority of these systems are based on, or support, a graph data model called the Labeled Property Graph (LPG), where vertices and edges can have arbitrarily complex sets of labels and properties. We then develop LPG2vec, an encoder that transforms an arbitrary LPG dataset into a representation that can be directly used with a broad class of GNNs, including convolutional, attentional, message-passing, and even higher-order or spectral models. In our evaluation, we show that the rich information represented as LPG labels and properties is properly preserved by LPG2vec, and it increases the accuracy of predictions regardless of the targeted learning task or the used GNN model, by up to 34% compared to graphs with no LPG labels/properties. In general, LPG2vec enables combining predictive power of the most powerful GNNs with the full scope of information encoded in the LPG model, paving the way for neural graph databases, a class of systems where the vast complexity of maintained data will benefit from modern and future graph machine learning methods.",10.48550/arXiv.2209.09732
86e9b0585c8b866665de18b2744d69aefff3e16d,A model and query language for temporal graph databases,2021,,10.1007/s00778-021-00675-4
a20e707395132f750fa958ebc0ea629b23b57bfe,An overview of graph databases and their applications in the biomedical domain,2021,"Abstract Over the past couple of decades, the explosion of densely interconnected data has stimulated the research, development and adoption of graph database technologies. From early graph models to more recent native graph databases, the landscape of implementations has evolved to cover enterprise-ready requirements. Because of the interconnected nature of its data, the biomedical domain has been one of the early adopters of graph databases, enabling more natural representation models and better data integration workflows, exploration and analysis facilities. In this work, we survey the literature to explore the evolution, performance and how the most recent graph database solutions are applied in the biomedical domain, compiling a great variety of use cases. With this evidence, we conclude that the available graph database management systems are fit to support data-intensive, integrative applications, targeted at both basic research and exploratory tasks closer to the clinic.",10.1093/database/baab026
d852660e15e82ae150dcde105639ba2c7d90f01f,Graph Databases,2019,,10.1007/978-3-319-77525-8_100147
703d49a335799262e474ed8fe6044cd641a9e00a,Multi-Dimensional Event Data in Graph Databases,2020,"Process event data is usually stored either in a sequential process event log or in a relational database. While the sequential, single-dimensional nature of event logs aids querying for (sub)sequences of events based on temporal relations such as “directly/eventually-follows,” it does not support querying multi-dimensional event data of multiple related entities. Relational databases allow storing multi-dimensional event data, but existing query languages do not support querying for sequences or paths of events in terms of temporal relations. In this paper, we propose a general data model for multi-dimensional event data based on labeled property graphs that allows storing structural and temporal relations in a single, integrated graph-based data structure in a systematic way. We provide semantics for all concepts of our data model, and generic queries for modeling event data over multiple entities that interact synchronously and asynchronously. The queries allow for efficiently converting large real-life event data sets into our data model, and we provide 5 converted data sets for further research. We show that typical and advanced queries for retrieving and aggregating such multi-dimensional event data can be formulated and executed efficiently in the existing query language Cypher, giving rise to several new research questions. Specifically, aggregation queries on our data model enable process mining over multiple inter-related entities using off-the-shelf technology.",10.1007/s13740-021-00122-1
2d95c27d4ed8cfb8379164888cd79c6b239250b4,Mapping RDF Databases to Property Graph Databases,2020,"RDF triplestores and property graph databases are two approaches for data management which are based on modeling, storing and querying graph-like data. In spite of such common principle, they present special features that complicate the task of database interoperability. While there exist some methods to transform RDF graphs into property graphs, and vice versa, they lack compatibility and a solid formal foundation. This paper presents three direct mappings (schema-dependent and schema-independent) for transforming an RDF database into a property graph database, including data and schema. We show that two of the proposed mappings satisfy the properties of semantics preservation and information preservation. The existence of both mappings allows us to conclude that the property graph data model subsumes the information capacity of the RDF data model.",10.1109/ACCESS.2020.2993117
93e6ba25e4c45c3f204a09b6a6b8b02bd3596091,Querying in the Age of Graph Databases and Knowledge Graphs,2021,"Graphs have become the best way we know of representing knowledge. The computing community has investigated and developed the support for managing graphs by means of digital technology. Graph databases and knowledge graphs surface as the most successful solutions to this program. This tutorial will provide a conceptual map of the data management tasks underlying these developments, paying particular attention to data models and query languages for graphs",10.1145/3448016.3457545
06424dcd3be195738b653d2ee4358d9974f4cb30,GAWD: graph anomaly detection in weighted directed graph databases,2021,"Given a set of node-labeled directed weighted graphs, how to find the most anomalous ones? How can we summarize the normal behavior in the database without losing information? We propose GAWD, for detecting anomalous graphs in directed weighted graph databases. The idea is to (1) iteratively identify the ""best"" substructure (i.e., subgraph or motif) that yields the largest compression when each of its occurrences is replaced by a super-node, and (2) score each graph by how much it compresses over iterations --- the more the compression, the lower the anomaly score. Different from existing work [1] on which we build, GAWD exhibits (i) a lossless graph encoding scheme, (ii) ability to handle numeric edge weights, (iii) interpretability by common patterns, and (iv) scalability with running time linear in input size. Experiments on four datasets injected with anomalies show that GAWD achieves significantly better results than state-of-the-art baselines.",10.1145/3487351.3488325
bcca5c7e9180c4890936343d79e812cb16cbefb6,"Graph Databases Comparison: AllegroGraph, ArangoDB, InfiniteGraph, Neo4J, and OrientDB",2018,"Graph databases are a very powerful solution for storing and searching for data designed for data rich in relationships, such as Facebook and Twitter. With data multiplication and data type diversity there has been a need to create new storage and analysis platforms that structure irregular data with a flexible schema, maintaining a high level of performance and ensuring data scalability effectively, which is a problem that relational databases cannot handle. In this paper, we analyse the most popular graph databases: AllegroGraph, ArangoDB, InfiniteGraph, Neo4J and OrientDB. We study the most important features for a complete and effective application, such as flexible schema, query language, sharding and scalability.",10.5220/0006910203730380
0443c9a0fbb403d5e7d3593f5d286cb74ed0b490,GHashing: Semantic Graph Hashing for Approximate Similarity Search in Graph Databases,2020,"Graph similarity search aims to find the most similar graphs to a query in a graph database in terms of a given proximity measure, say Graph Edit Distance (GED). It is a widely studied yet still challenging problem. Most of the studies are based on the pruning-verification framework, which first prunes non-promising graphs and then conducts verification on the small candidate set. Existing methods are capable of managing databases with thousands or tens of thousands of graphs, but fail to scale to even larger database, due to their exact pruning strategy. Inspired by the recent success of deep-learning-based semantic hashing in image and document retrieval, we propose a novel graph neural network (GNN) based semantic hashing, i.e. GHashing, for approximate pruning. We first train a GNN with ground-truth GED results so that it learns to generate embeddings and hash codes that preserve GED between graphs. Then a hash index is built to enable graph lookup in constant time. To answer a query, we use the hash codes and the continuous embeddings as two-level pruning to retrieve the most promising candidates, which are sent to the exact solver for final verification. Due to the approximate pruning strategy leveraged by our graph hashing technique, our approach achieves significantly faster query time compared to state-of-the-art methods while maintaining a high recall. Experiments show that our approach is on average 20x faster than the only baseline that works on million-scale databases, which demonstrates GHashing successfully provides a new direction in addressing graph search problem for large-scale graph databases.",10.1145/3394486.3403257
c858ba9bce833896b49878a6793dbb382ed83c9e,Query Languages for Graph Databases,2019,"In the past few years, many NoSQL databases have emerged, including graph databases. NoSQL databases have certain advantages and they can be used in certain domains as an alternative to relational databases. In order to use graph databases, one needs to be familiar with specific languages like Cypher Query Language (CQL) or Gremlin. However, some statements in CQL can be considered too complex for end users as it is shown later on. Because of that, the main idea of this chapter is to explore two other languages for graph databases. One of them is new and it is used to pose queries visually. Since CQL does not support recursion, views, etc., the other language is used to show how to use recursion and views on a graph database.",10.4018/978-1-5225-2255-3.CH176
f3e765ca2b8c4191759b141d2e5c42215ed9090d,The Suitability of Graph Databases for Big Data Analysis: A Benchmark,2020,": Digitalization of our society brings various new digital ecosystems (e.g., Smart Cities, Smart Buildings, Smart Mobility), which rely on the collection, storage, and processing of Big Data. One of the recently popular advancements in Big Data storage and processing are the graph databases. A graph database is specialized to handle highly connected data, which can be, for instance, found in the cross-domain setting where various levels of data interconnection take place. Existing works suggest that for data with many relationships, the graph databases perform better than non-graph databases. However, it is not clear where are the borders for speciﬁc query types, for which it is still efﬁcient to use a graph database. In this paper, we design and perform tests that examine these borders. We perform the tests in a cluster of three machines so that we explore the database behavior in Big Data scenarios concerning the query. We speciﬁcally work with Neo4j as a representative of graph databases and PostgreSQL as a representative of non-graph databases.",10.5220/0009350902130220
689c7a86d973895a14feb984b8faa3d5581038ef,"Demystifying Graph Databases: Analysis and Taxonomy of Data Organization, System Designs, and Graph Queries",2019,"Numerous irregular graph datasets, for example social networks or web graphs, may contain even trillions of edges. Often, their structure changes over time and they have domain-specific rich data associated with vertices and edges. Graph database systems such as Neo4j enable storing, processing, and analyzing such large, evolving, and rich datasets. Due to the sheer size and irregularity of such datasets, these systems face unique design challenges. To facilitate the understanding of this emerging domain, we present the first survey and taxonomy of graph database systems. We focus on identifying and analyzing fundamental categories of these systems (e.g., document stores, tuple stores, native graph database systems, or object-oriented systems), the associated graph models (e.g., Resource Description Framework or Labeled Property Graph), data organization techniques (e.g., storing graph data in indexing structures or dividing data into records), and different aspects of data distribution and query execution (e.g., support for sharding and Atomicity, Consistency, Isolation, Durability). Fifty-one graph database systems are presented and compared, including Neo4j, OrientDB, and Virtuoso. We outline graph database queries and relationships with associated domains (NoSQL stores, graph streaming, and dynamic graph algorithms). Finally, we outline future research and engineering challenges related to graph databases.",10.1145/3604932
44ec06d911eed44ee99be61bd9ce964a824a2ed7,Schema Validation and Evolution for Graph Databases,2019,"Despite the maturity of commercial graph databases, little consensus has been reached so far on the standardization of data definition languages (DDLs) for property graphs (PG). The discussion on the characteristics of PG schemas is ongoing in many standardization and community groups. Although some basic aspects of a schema are already present in Neo4j 3.5, like in most commercial graph databases, full support is missing allowing to constraint property graphs with more or less flexibility. In this paper, we focus on two different perspectives from which a PG schema should be considered, as being descriptive or prescriptive, and we show how it would be possible to switch from one to another as the application under development gains more stability. Apart from proposing concise schema DDL inspired by Cypher syntax, we show how schema validation can be enforced through homomorphisms between PG schemas and PG instances; and how schema evolution can be described through the use of graph rewriting operations. Our prototypical implementation demonstrates feasibility and shows the need of offering high-level query primitives to accommodate flexible graph schema requirements as showcased in our work.",10.1007/978-3-030-33223-5_37
8afa626901e6b77b3936b8eb64df4a5a538444a0,Using Graph Databases,2020,"Data in High Energy Physics (HEP) usually consist of complext complex data structures stored in relational databases and files with internal schema. Such architecture exhibits many shortcomings, which could be fixed by migrating into Graph Database storage. The paper describes basic principles of the Graph Database together with an overview of existing standards and implementations. The usefulness and usability are demonstrated using the concrete example of the Event Index of the ATLAS experiment at LHC in two approaches as the full storage (all data are in the Graph Database) and meta-storage (a layer of schema-less graph-like data implemented on top of more traditional storage). The usability, the interfaces with the surrounding framework and the performance of those solutions are discussed. The possible more general usefulness for generic experiments’ storage is also discussed.",10.1051/epjconf/202024504004
6ea38aacc779506909d425aa19114b92bb1854f8,Regular Queries on Graph Databases,2017,"Graph databases are currently one of the most popular paradigms for storing data. One of the key conceptual differences between graph and relational databases is the focus on navigational queries that ask whether some nodes are connected by paths satisfying certain restrictions. This focus has driven the definition of several different query languages and the subsequent study of their fundamental properties. We define the graph query language of Regular Queries, which is a natural extension of unions of conjunctive 2-way regular path queries (UC2RPQs) and unions of conjunctive nested 2-way regular path queries (UCN2RPQs). Regular queries allow expressing complex regular patterns between nodes. We formalize regular queries as nonrecursive Datalog programs extended with the transitive closure of binary predicates. This language has been previously considered, but its algorithmic properties are not well understood. Our main contribution is to show elementary tight bounds for the containment problem for regular queries. Specifically, we show that this problem is 2Expspace-complete. For all extensions of regular queries known to date, the containment problem turns out to be non-elementary. Together with the fact that evaluating regular queries is not harder than evaluating UCN2RPQs, our results show that regular queries achieve a good balance between expressiveness and complexity, and constitute a well-behaved class that deserves further investigation.",10.1007/s00224-016-9676-2
59f1df2f60280eea79d195b9c561d52a77fb24de,Foundations of Modern Query Languages for Graph Databases,2016,"We survey foundational features underlying modern graph query languages. We first discuss two popular graph data models: edge-labelled graphs, where nodes are connected by directed, labelled edges, and property graphs, where nodes and edges can further have attributes. Next we discuss the two most fundamental graph querying functionalities: graph patterns and navigational expressions. We start with graph patterns, in which a graph-structured query is matched against the data. Thereafter, we discuss navigational expressions, in which patterns can be matched recursively against the graph to navigate paths of arbitrary length; we give an overview of what kinds of expressions have been proposed and how they can be combined with graph patterns. We also discuss several semantics under which queries using the previous features can be evaluated, what effects the selection of features and semantics has on complexity, and offer examples of such features in three modern languages that are used to query graphs: SPARQL, Cypher, and Gremlin. We conclude by discussing the importance of formalisation for graph query languages; a summary of what is known about SPARQL, Cypher, and Gremlin in terms of expressivity and complexity; and an outline of possible future directions for the area.",10.1145/3104031
1d0d84a1f4e8de75151d88bd152816f18109d032,Similarity Search in Graph Databases: A Multi-Layered Indexing Approach,2017,"We consider in this paper the similarity search problem that retrieves relevant graphs from a graph database under the well-known graph edit distance (GED) constraint. Formally, given a graph database G = fg1, g2, …, gng and a query graph q, we aim to search the graph gi 2 G such that the graph edit distance between gi and q, GED(gi, q), is within a userspecified GED threshold. In spite of its theoretical significance and wide applicability, the GED-based similarity search problem is challenging in large graph databases due in particular to a large amount of GED computation incurred, which has proven to be NP-hard. In this paper, we propose a parameterized, partitionbased GED lower bound that can be instantiated into a series of tight lower bounds towards synergistically pruning false-positive graphs from G before costly GED computation is performed. We design an efficient, selectivity-aware algorithm to partition graphs of G into highly selective subgraphs. They are further incorporated in a cost-effective, multi-layered indexing structure, MLIndex (Multi-Layered Index), for GED lower bound crosschecking and false-positive graph filtering with theoretical performance guarantees. Experimental studies in real and synthetic graph databases validate the efficiency and effectiveness of ML-Index, which achieves up to an order of magnitude speedup over the state-of-the-art method for similarity search in graph databases.",10.1109/ICDE.2017.129
6e87f544017f73670c44d9d0856340a289ff9e38,"SQUID: A Scalable System for Querying, Updating and Indexing Dynamic Graph Databases",2019,"Graph databases such as chemical databases, protein databases, and RNA motif databases, are simply a collection of graphs. Querying a graph database involves the computation of a subgraph isomorphism problem (which is NP-complete) for each graph in the database. Therefore, an index is required to filter out false positives and reduce the number of subgraph isomorphisms to compute. In this demo, we introduce SQUID, a scalable system for querying, updating and indexing dynamic graph databases, i.e., databases changing over time, and showcase it on chemical databases. The tool uses a graph coarsening-based index that is able to answer both subgraph and supergraph queries. It also allows the database to be changed with an automatic index update. Also, it displays information found in the graph database in a concise manner that is easier to understand.",10.1145/3335783.3335799
659d8b24e53e8adfbcb1f16b26ada2cb8afa2c85,A Schema-First Formalism for Labeled Property Graph Databases: Enabling Structured Data Loading and Analytics,2019,"Graph databases provide better support for highly interconnected datasets than relational databases. However, labeled property graph databases, which have become increasingly popular, are schema-optional, making them prone to data corruption, especially when new users switch from relational databases to graph databases. In this work, we provide a schema-driven formalism for graph databases. This formalism enables schema-driven loading of graph databases from other sources, such as relational databases. Also, this formalism enables schema-driven data analytics that allows for a more structured analysis of data stored in graph databases. Such analytics are based on a boilerplate approach allowing users who are not experts in the use of graph database query languages to carry out analytics efficiently. We showcase the utility of the proposed formalism by considering a case study from Airbnb for illustrating schema-based loading procedures. The proposed schema-driven analytics process is illustrated using another case study from an industrial cyber-physical systems standard. Overall, the schema-driven formalism provides several useful features, such as preventing both data corruption and long-term degradation of graph database structures.",10.1145/3365109.3368782
b8e30590ac81875a7fc4f7cfd425bd5148a72f5c,Updating Graph Databases with Cypher,2019,"The paper describes the present and the future of graph updates in Cypher, the language of the Neo4j property graph database and several other products. Update features include those with clear analogs in relational databases, as well as those that do not correspond to any relational op-erators. Moreover, unlike SQL, Cypher updates can be ar-bitrarily intertwined with querying clauses. After present-ing the current state of update features, we point out their shortcomings, most notably violations of atomicity and nondeterministic behavior of updates. These have not been previously known in the Cypher community. We then describe the industry-academia collaboration on designing a revised set of Cypher update operations. Based on discovered shortcomings of update features, a number of possible solutions were devised. They were presented to key Cypher users, who were given the opportunity to comment on how update features are used in real life, and on their preferences for proposed ﬁxes. As the result of the consultation, a new set of update operations for Cypher were designed. Those led to a streamlined syntax, and eliminated the unexpected and problematic behavior that original Cypher updates exhib-ited.",10.14778/3352063.3352139
c867c372ed78e27c53feaf788e74aa7506302bbe,Graph Databases: Neo4j Analysis,2017,"The volume of data is growing at an increasing rate. This growth is both in size and in connectivity, where connectivity refers to the increasing presence of relationships between data. Social networks such as Facebook and Twitter store and process petabytes of data each day. Graph databases have gained renewed interest in the last years, due to their applications in areas such as the Semantic Web and Social Network Analysis. Graph databases provide an effective and efficient solution to data storage and querying data in these scenarios, where data is rich in relationships. In this paper, it is analyzed the fundamental points of graph databases, showing their main characteristics and advantages. We study Neo4j, the top graph database software in the market and evaluate its performance using the Social Network Benchmark (SNB).",10.5220/0006356003510356
d154d986c3a402c207c6c0e22093f2e1a878fe71,Two for one: querying property graph databases using SPARQL via gremlinator,2018,"In the past decade Knowledge graphs have become very popular and frequently rely on the Resource Description Framework (RDF) or Property Graphs (PG) as their data models. However, the query languages for these two data models - SPARQL for RDF and the PG traversal language Gremlin - are lacking basic interoperability. In this demonstration paper, we present Gremlinator, the first translator from SPARQL - the W3C standardized language for RDF - to Gremlin - a popular property graph traversal language. Gremlinator translates SPARQL queries to Gremlin path traversals for executing graph pattern matching queries over graph databases. This allows a user, who is well versed in SPARQL, to access and query a wide variety of Graph databases avoiding the steep learning curve for adapting to a new Graph Query Language (GQL). Gremlin is a graph computing system-agnostic traversal language (covering both OLTP graph databases and OLAP graph processors), making it a desirable choice for supporting interoperability for querying Graph databases. Gremlinator is planned to be released as an Apache TinkerPop plugin in the upcoming releases.",10.1145/3210259.3210271
2be77516f6233a9d3ebbf93b439c3658d955d2e5,Efficient and Scalable Integrity Verification of Data and Query Results for Graph Databases,2018,"Graphs are used for representing and understanding objects and their relationships for numerous applications such as social networks, Semantic Webs, and biological networks. Integrity assurance of data and query results for graph databases is an essential security requirement. In this paper, we propose two efficient integrity verification schemes—HMACs for graphs (gHMAC) for two-party data sharing, and redactable HMACs for graphs (rgHMAC) for third-party data sharing, such as a cloud-based graph database service. We compute one HMAC value for both the schemes and two other verification objects for rgHMAC scheme that are shared with the verifier. We show that the proposed schemes are provably secure with respect to integrity attacks on the structure and/or content of graphs and query results. The proposed schemes have linear complexity in terms of the number of vertices and edges in the graphs, which is shown to be optimal. Our experimental results corroborate that the proposed HMAC-based schemes for graphs are highly efficient as compared to the digital signature-based schemes—computation of HMAC tags is about 10 times faster than the computation of digital signatures.",10.1109/TKDE.2017.2776221
3876267a762615ac876df561b900aa6e564fc9b4,Performance of Graph and Relational Databases in Complex Queries,2022,"In developing NoSQL databases, a major motivation is to achieve better efficient query performance compared with relational databases. The graph database is a NoSQL paradigm where navigation is based on links instead of joining tables. Links can be implemented as pointers, and following a pointer is a constant time operation, whereas joining tables is more complicated and slower, even in the presence of foreign keys. Therefore, link-based navigation has been seen as a more efficient query approach than using join operations on tables. Existing studies strongly support this assumption. However, query complexity has received less attention. For example, in enterprise information systems, queries are usually complex so data need to be collected from several tables or by traversing paths of graph nodes of different types. In the present study, we compared the query performance of a graph-based database system (Neo4j) and relational database systems (MySQL and MariaDB). The effect of different efficiency issues (e.g., indexing and optimization) were included in the comparison in order to investigate the most efficient solutions for different query types. The outcome is that although Neo4j is more efficient for simple queries, MariaDB is essentially more efficient when the complexity of queries increases. The study also highlighted how dramatically the efficiency of relational database has grown during the last decade.",10.3390/app12136490
39af4070dca3221d275898c55884167bc03fe73d,Singleton Property Graph: Adding A Semantic Web Abstraction Layer to Graph Databases,2019,,
1f4bee77bb69b92dd16ce0c3ad0f477f4ecf1d30,Analytical queries on semantic trajectories using graph databases,2019,"This article studies the analysis of moving object data collected by location‐aware devices, such as GPS, using graph databases. Such raw trajectories can be transformed into so‐called semantic trajectories, which are sequences of stops that occur at “places of interest.” Trajectory data analysis can be enriched if spatial and non‐spatial contextual data associated with the moving objects are taken into account, and aggregation of trajectory data can reveal hidden patterns within such data. When trajectory data are stored in relational databases, there is an “impedance mismatch” between the representation and storage models. Graphs in which the nodes and edges are annotated with properties are gaining increasing interest to model a variety of networks. Therefore, this article proposes the use of graph databases (Neo4j in this case) to represent and store trajectory data, which can thus be analyzed at different aggregation levels using graph query languages (Cypher, for Neo4j). Through a real‐world public data case study, the article shows that trajectory queries are expressed more naturally on the graph‐based representation than over the relational alternative, and perform better in many typical cases.",10.1111/tgis.12556
6e4e15ab0d55232b93e76ddecb6c969a0d18f853,Designing Graph Databases With GRAPHED,2019,"In recent years, graph database systems have become very popular and been deployed mainly in situations where the relationship between data is significant, such as in social networks. Although they do not require a particular schema design, a data model contributes to their consistency. Designing diagrams is an approach to satisfying this demand for a conceptual data model. While researchers and companies have been developing concepts and notations for graph database modeling, their notations focus on their specific implementations. In this article, the authors propose a diagram to address this lack of a generic and comprehensive notation for graph databases modeling, named GRAPHED (Graph Description Diagram for Graph Databases). The authors verified the effectiveness and compatibility of GRAPHED in two case studies: fraud identification, and a biological network model.",10.4018/JDM.2019010103
647d0e540627c5a903299a90d20530f8e48c18d9,Representing and querying disease networks using graph databases,2016,"Systems biology experiments generate large volumes of data of multiple modalities and this information presents a challenge for integration due to a mix of complexity together with rich semantics. Here, we describe how graph databases provide a powerful framework for storage, querying and envisioning of biological data. We show how graph databases are well suited for the representation of biological information, which is typically highly connected, semi-structured and unpredictable. We outline an application case that uses the Neo4j graph database for building and querying a prototype network to provide biological context to asthma related genes. Our study suggests that graph databases provide a flexible solution for the integration of multiple types of biological data and facilitate exploratory data mining to support hypothesis generation.",10.1186/s13040-016-0102-8
13bd0e08713f0b340396634892d2c9e3c5bee548,Comparative study of relational and graph databases,2019,"We live in a time of incredible technological development. In a fraction of a second, millions of information are generated and processed all over the world. The need to develop new models of databases is related to the dynamic and the amount of data stored. Using database schemes which are rigid and do not quickly adapt to changes occurring in the real world is ineffective and sometimes simply impossible. The solution of all these problems could be, among others, graph databases.In this talk, we present a detailed comparison of relational and graph databases, compiling the stages of design, implementation and testing. At each stage, we keep the same data in both databases, checking how easily they can be modelled in each logical model, then imported, and finally made queries and modifications on them.",10.1109/Informatics47936.2019.9119303
e8505f6175585713aa7b785285b3abc4113b57ef,Investigative Graph Search using Graph Databases,2019,"Identification and tracking of individuals or groups perpetrating latent or emergent behaviors are significant in home-land security, cyber security, behavioral health, and consumer analytics. Graphs provide an effective formal mechanism to capture the relationships among individuals of interest as well as their behavior patterns. Graph databases, developed recently, serve as convenient data stores for such complex graphs and allow efficient retrievals via high-level libraries and the ability to implement custom queries. We introduce PINGS (Procedures for Investigative Graph Search) a graph database library of procedures for investigative search. We develop an inexact graph pattern matching technique and scoring mechanism within the database as custom procedures to identify latent behavioral patterns of individuals. It addresses, among other things, sub-graph isomorphism, an NP-hard problem, via an investigative search in graph databases. We demonstrate the capability of detecting such individuals and groups meeting query criteria using two data sets, a synthetically generated radicalization dataset and a publicly available crime dataset.",10.1109/GC46384.2019.00017
1731458f7ac96b23bd8ffe4c1bb71295772b5566,Modelling and Querying Star and Snowflake Warehouses Using Graph Databases,2019,,10.1007/978-3-030-30278-8_18
8ada773522e0cc1b1a1b36b8e5d85417794a875f,"When Subgraph Isomorphism is Really Hard, and Why This Matters for Graph Databases",2018,"The subgraph isomorphism problem involves deciding whether a copy of a pattern graph occurs inside a larger target graph. The non-induced version allows extra edges in the target, whilst the induced version does not. Although both variants are NP-complete, algorithms inspired by constraint programming can operate comfortably on many real-world problem instances with thousands of vertices. However, they cannot handle arbitrary instances of this size. We show how to generate "" really hard "" random instances for subgraph isomorphism problems, which are computationally challenging with a couple of hundred vertices in the target, and only twenty pattern vertices. For the non-induced version of the problem, these instances lie on a satisfiable / unsatisfiable phase transition, whose location we can predict; for the induced variant, much richer behaviour is observed, and constrained-ness gives a better measure of difficulty than does proximity to a phase transition. These results have practical consequences: we explain why the widely researched "" filter / verify "" indexing technique used in graph databases is founded upon a misunderstanding of the empirical hardness of NP-complete problems, and cannot be beneficial when paired with any reasonable subgraph isomorphism algorithm.",10.1613/jair.5768
4f873d5a3ab80402e206a361eeffd3b69f014db0,Semiring Provenance over Graph Databases,2018,,
b3b64555a641afd3c8fc2da30bbb30b0b56e0c60,Comparative Analysis of Relational and Graph Databases for Social Networks,2018,"Network analysis is an important concept of the 21st- century business analytics. Software applications provide diverse capabilities to scale data and information in making constructive decisions. Business intelligence is the process through which data sets are arranged in graphs and tables to derive patterns that can help predict consumption, demand and future trends. The Neo4j is a database purpose-built to support data analysis, graph storage, and intelligent applications. The database supports direct access, data management, and graph visualization for social channels and digital marketing in social platforms. This paper is a comparative analysis that examines the operational efficiency of Neo4j and another selected database and to examine their overall performance and functionality. Of special concern for research is to propose an experiment to evaluate the performance, scope of operations, and overall functionality of the two graph databases. The objective of the comparative analysis is to determine the most appropriate database for social networks. The results of the experience will help inform business leaders and I. T managers on the best applications and databases to deploy in the management of social networking channels like Facebook and Twitter. (Abstract)",10.1109/CAIS.2018.8441982
12b8af038d27defddc972c9bbcdf151b2594ee69,A Bottom-Up Algorithm for Answering Context-Free Path Queries in Graph Databases,2018,,10.1007/978-3-319-91662-0_17
d47686fd5ce403fe962c80b651c8b130061a5d73,UMLtoGraphDB: Mapping Conceptual Schemas to Graph Databases,2016,"The need to store and manipulate large volume of (unstructured) data has led to the development of several NoSQL databases for better scalability. Graph databases are a particular kind of NoSQL databases that have proven their efficiency to store and query highly interconnected data, and have become a promising solution for multiple applications. While the mapping of conceptual schemas to relational databases is a well-studied field of research, there are only few solutions that target conceptual modeling for NoSQL databases and even less focusing on graph databases. This is specially true when dealing with the mapping of business rules and constraints in the conceptual schema. In this article we describe a mapping from UML/OCL conceptual schemas to Blueprints, an abstraction layer on top of a variety of graph databases, and Gremlin, a graph traversal language, via an intermediate Graph metamodel. Tool support is fully available.",10.1007/978-3-319-46397-1_33
e0fdd11f8ffe065081e2e4694a8855a766abe31a,Improving Game Modeling for the Quoridor Game State Using Graph Databases,2018,,10.1007/978-3-319-73450-7_32
0134db5adf50c471906cbffa0d2f6a4fcbc0ae01,Graph Databases in Molecular Biology,2018,,10.1007/978-3-030-01722-4_5
f0dde44d5836ac8ae1d8a501b26317c952fe5abc,Using Functional Dependencies in Conversion of Relational Databases to Graph Databases,2018,,10.1007/978-3-319-98812-2_31
620f78ee4a52c3f61e5600d5c354b2234d8f7858,Fireplug: Flexible and robust N-version geo-replication of graph databases,2018,"The paper describes and evaluates Fireplug, a flexible architecture to build robust geo-replicated graph databases. Fireplug can be configured to tolerate from crash to Byzantine faults, both within and across different datacenters. Furthermore, Fireplug is robust to bugs in existing graph database implementations, as it allows to combine multiple graph databases instances in a cohesive manner. Thus, Fireplug can support many different deployments, according to the performance/robustness tradeoffs imposed by the target application. Our evaluation shows that Fireplug can implement Byzantine fault tolerance in geo-replicated scenarios and still outperform the built-in replication mechanism of Neo4j, which only supports crash faults.",10.1109/ICOIN.2018.8343095
006bd41c4a52c64445afdbc67182715a476e09c8,Querying Encrypted Graph Databases,2018,"Copyright © 2018 by SCITEPRESS – Science and Technology Publications, Lda. All rights reserved. We present an approach to execution of queries on encrypted graph databases. The approach is inspired by CryptDB system for relational DBs (R. A. Popa et al). Before processing a graph query is translated into encrypted form which then executed on a server without decrypting any data; the encrypted results are sent back to a client where they are finally decrypted. In this way data privacy is protected at the server side. We present the design of the system and empirical data obtained by experimentation with a prototype, implemented for Neo4j graph DBMS and Cypher query language, utilizing Java API. We report the efficiency of query execution for various types of queries on encrypted and non-encrypted Neo4j graph databases.",10.5220/0006660004470451
d7948ee13698eaa556716b4161202f8690e493ff,Application of graph databases and graph theory concepts for advanced analysing of BIM models based on IFC standard,2017,,
16a65dcd609d48f79a9a271377628fdae5315a62,biochem4j: Integrated and extensible biochemical knowledge through graph databases,2017,"Biologists and biochemists have at their disposal a number of excellent, publicly available data resources such as UniProt, KEGG, and NCBI Taxonomy, which catalogue biological entities. Despite the usefulness of these resources, they remain fundamentally unconnected. While links may appear between entries across these databases, users are typically only able to follow such links by manual browsing or through specialised workflows. Although many of the resources provide web-service interfaces for computational access, performing federated queries across databases remains a non-trivial but essential activity in interdisciplinary systems and synthetic biology programmes. What is needed are integrated repositories to catalogue both biological entities and–crucially–the relationships between them. Such a resource should be extensible, such that newly discovered relationships–for example, those between novel, synthetic enzymes and non-natural products–can be added over time. With the introduction of graph databases, the barrier to the rapid generation, extension and querying of such a resource has been lowered considerably. With a particular focus on metabolic engineering as an illustrative application domain, biochem4j, freely available at http://biochem4j.org, is introduced to provide an integrated, queryable database that warehouses chemical, reaction, enzyme and taxonomic data from a range of reliable resources. The biochem4j framework establishes a starting point for the flexible integration and exploitation of an ever-wider range of biological data sources, from public databases to laboratory-specific experimental datasets, for the benefit of systems biologists, biosystems engineers and the wider community of molecular biologists and biological chemists.",10.1371/journal.pone.0179130
f75f16b5cf0fc2e667d79a122190757bfccb0a3d,GRAPHED: A Graph Description Diagram for Graph Databases,2018,,10.1007/978-3-319-77703-0_111
b374939320dcba4255a14637d36bbee785a2d860,Building Knowledge Extraction from BIM/IFC Data for Analysis in Graph Databases,2018,,10.1007/978-3-319-91262-2_57
d427db1ba2cc92b36d16a5e5114f1027c90fff68,Model driven reverse engineering of NoSQL property graph databases: The case of Neo4j,2017,"Most NoSQL databases are schemaless. Although they offer some flexibility, they do not have any knowledge of the database schema, losing the benefits provided by these schemas. It is generally accepted that data modelling can have an impact on performance, consistency, usability, and maintainability. We argue that NoSQL databases need data models that ensure the proper storage and the relevant querying of the data. This paper seeks to present and illustrate an MDA-based approach, allowing us to achieve a reverse engineering of NoSQL property graph databases into an Extended Entity-Relationship schema. The approach is applied to the case of Neo4j graph database. We present an illustrative scenario and evaluate the reverse engineering approach.",10.1109/BIGDATA.2017.8257957
7549a6e03afdd42ae94c19235db076319eeb34f8,Do We Need Specialized Graph Databases?: Benchmarking Real-Time Social Networking Applications,2017,"With the advent of online social networks, there is an increasing demand for storage and processing of graph-structured data. Social networking applications pose new challenges to data management systems due to demand for real-time querying and manipulation of the graph structure. Recently, several systems specialized systems for graph-structured data have been introduced. However, whether we should abandon mature RDBMS technology for graph databases remains an ongoing discussion. In this paper we present an graph database benchmarking architecture built on the existing LDBC Social Network Benchmark. Our proposed architecture stresses the systems with an interactive transactional workload to better simulate the real-time nature of social networking applications. Using this improved architecture, we evaluated a selection of specialized graph databases, RDF stores, and RDBMSes adapted for graphs. We do not find that specialized graph databases provide definitively better performance.",10.1145/3078447.3078459
ae876b07435880d0359ca68b30af90b2e3193ad4,IOGP: An Incremental Online Graph Partitioning Algorithm for Distributed Graph Databases,2017,"Graphs have become increasingly important in many applications and domains such as querying relationships in social networks or managing rich metadata generated in scientific computing. Many of these use cases require high-performance distributed graph databases for serving continuous updates from clients and, at the same time, answering complex queries regarding the current graph. These operations in graph databases, also referred to as online transaction processing (OLTP) operations, have specific design and implementation requirements for graph partitioning algorithms. In this research, we argue it is necessary to consider the connectivity and the vertex degree changes during graph partitioning. Based on this idea, we designed an Incremental Online Graph Partitioning (IOGP) algorithm that responds accordingly to the incremental changes of vertex degree. IOGP helps achieve better locality, generate balanced partitions, and increase the parallelism for accessing high-degree vertices of the graph. Over both real-world and synthetic graphs, IOGP demonstrates as much as 2x better query performance with a less than 10% overhead when compared against state-of-the-art graph partitioning algorithms.",10.1145/3078597.3078606
45063cf2e0116e700da5ca2863c8bb82ad4d64c2,Conceptual and Database Modelling of Graph Databases,2016,"Comparing graph databases with traditional, e.g., relational databases, some important database features are often missing there. Particularly, a graph database schema including integrity constraints is not explicitly defined, also a conceptual modelling is not used at all. It is hard to check a consistency of the graph database, because almost no integrity constraints are defined. In the paper, we discuss these issues and present current possibilities and challenges in graph database modelling. Also a conceptual level of a graph database design is considered. We propose a sufficient conceptual model and show its relationship to a graph database model. We focus also on integrity constraints modelling functional dependencies between entity types, which reminds modelling functional dependencies known from relational databases and extend them to conditional functional dependencies.",10.1145/2938503.2938547
e89c22555d5e20a14669522838029c6f49893c57,"Querying Wikidata: Comparing SPARQL, Relational and Graph Databases",2016,,10.1007/978-3-319-46547-0_10
f51dfc161c98140d4156e512dd3b4f839cc7f491,Scaling Lifted Probabilistic Inference and Learning Via Graph Databases,2016,"Over the past decade, exploiting relations and symmetries within probabilistic models has been proven to be surprisingly effective at solving large scale data mining problems. One of the key operations inside these lifted approaches is counting be it for parameter/structure learning or for efficient inference. Typically, however, they just count exploiting the logical structure using adhoc operators. This paper investigates whether ‘Compilation to Graph Databases’ could be a practical technique for scaling lifted probabilistic inference and learning methods. We demonstrate that the proposed approach achieves reasonable speed-ups for both inference and learning, without sacrificing performance.",10.1137/1.9781611974348.83
6cc4b0919f14bdcba4d3f1d97b04bd134bfb45c4,STON: exploring biological pathways using the SBGN standard and graph databases,2016,"When modeling in Systems Biology and Systems Medicine, the data is often extensive, complex and heterogeneous. Graphs are a natural way of representing biological networks. Graph databases enable efficient storage and processing of the encoded biological relationships. They furthermore support queries on the structure of biological networks. We present the Java-based framework STON (SBGN TO Neo4j). STON imports and translates metabolic, signalling and gene regulatory pathways represented in the Systems Biology Graphical Notation into a graph-oriented format compatible with the Neo4j graph database. STON exploits the power of graph databases to store and query complex biological pathways. This advances the possibility of: i) identifying subnetworks in a given pathway; ii) linking networks across different levels of granularity to address difficulties related to incomplete knowledge representation at single level; and iii) identifying common patterns between pathways in the database.",10.1186/s12859-016-1394-x
f7a8573d4daa4083419a864ef7a8bf97bc0754e5,Detecting Evidence of Fraud in the Brazilian Government Using Graph Databases,2017,,10.1007/978-3-319-56538-5_47
e7f1640a76bbfdf701e6cd4d81163be2eb97a4de,Functional querying in graph databases,2017,"The paper is focused on a functional querying in graph databases. We consider labelled property graph model and mention also the graph model behind XML databases. An attention is devoted to functional modelling of graph databases both at a conceptual and data level. The notions of graph conceptual schema and graph database schema are considered. The notion of a typed attribute is used as a basic structure both on the conceptual and database level. As a formal approach to declarative graph database querying a version of typed lambda calculus is used. This approach allows to use a logic necessary for querying, arithmetic as well as aggregation function. Another advantage is the ability to deal with relations and graphs in one integrated environment.",10.1007/s40595-017-0104-6
f3b0ca9d0c420e6c6bc24a5e9dd959e8c899b38e,Backlogs and Interval Timestamps: Building Blocks for Supporting Temporal Queries in Graph Databases,2017,,
42fe18be6e9ff2c11e5b2347c93e131c9abc7a51,Graph Databases for Knowledge Management,2017,"Emerging technologies let companies manage their knowledge assets with more innovative and effective methods. Due to the complex nature of knowledge management processes, it is cumbersome to design, develop, and implement a system based on relational databases. This article proposes a specific graph database application in streamlining major knowledge management processes. The author develops a property graph data model to facilitate the process model of knowledge management. In addition, this property graph data model is implemented through the Neo4j graph database system. This research provides some guidance for practitioners in seeking alternative approaches to traditional methods of knowledge management.",10.1109/MITP.2017.4241463
91bd879d3fcbdb851c8442be47e7ee8fa4ef8586,Scalable supergraph search in large graph databases,2016,"Supergraph search is a fundamental problem in graph databases that is widely applied in many application scenarios. Given a graph database and a query-graph, supergraph search retrieves all data-graphs contained in the query-graph from the graph database. Most existing solutions for supergraph search follow the pruning-and-verification framework, which prunes false answers based on features in the pruning phase and performs subgraph isomorphism testings on the remaining graphs in the verification phase. However, they are not scalable to handle large-sized data-graphs and query-graphs due to three drawbacks. First, they rely on a frequent subgraph mining algorithm to select features which is expensive and cannot generate large features. Second, they require a costly verification phase. Third, they process features in a fixed order without considering their relationship to the query-graph. In this paper, we address the three drawbacks and propose new indexing and query processing algorithms. In indexing, we select features directly from the data-graphs without expensive frequent subgraph mining. The features form a feature-tree that contains all-sized features and both the cost sharing and pruning power of the features are considered. In query processing, we propose a verification-free algorithm, where the order to process features is query-dependent by considering both the cost sharing and the pruning power. We explore two optimization strategies to further improve the algorithm efficiency. The first strategy applies a lightweight graph compression technique and the second strategy optimizes the inclusion of answers. Finally, we conduct extensive performance studies on two real large datasets to demonstrate the high scalability of our algorithms.",10.1109/ICDE.2016.7498237
19c284f50869970a31f45cbec20d2db90aa278e3,Learning to Speed Up Query Planning in Graph Databases,2017,"    Querying graph structured data is a fundamental operation that enables important applications including knowledge graph search, social network analysis, and cyber-network security. However, the growing size of real-world data graphs poses severe challenges for graph databases to meet the response-time requirements of the applications. Planning the computational steps of query processing — Query Planning — is central to address these challenges. In this paper, we study the problem of learning to speedup query planning in graph databases towards the goal of improving the computational-efficiency of query processing via training queries. We present a Learning to Plan (L2P) framework that is applicable to a large class of query reasoners that follow the Threshold Algorithm (TA) approach. First, we define a generic search space over candidate query plans, and identify target search trajectories (query plans) corresponding to the training queries by performing an expensive search. Subsequently, we learn greedy search control knowledge to imitate the search behavior of the target query plans. We provide a concrete instantiation of our L2P framework for STAR, a state-of-the-art graph query reasoner. Our experiments on benchmark knowledge graphs including dbpedia, yago, and freebase show that using the query plans generated by the learned search control knowledge, we can significantly improve the speed of STAR with negligible loss in accuracy.   ",10.1609/icaps.v27i1.13849
6b98410fcea56a1d8368fe31384d2cacdcf78fdc,Striving for semantic convergence with fuzzy cognitive maps and graph databases,2017,"The exponentially rising amounts of urban data demand new conceptual and technical methods for their management and storage. The era of the Semantic Web requires a convergence toward commonly shared meanings. The combination of fuzzy cognitive maps with graph databases is a first approach to a solution. This article determines the basic requirements for the storing of fuzzy cognitive maps to test current graph databases for their structural suitability. Six out of 47 graph databases fulfill the requirements and are thus recommended for further research purposes. As a proof of concept, OrientDB is used to present how a semantic convergence can be reached through the combination of fuzzy cognitive maps and graph databases in a cognitive city by tackling fuzziness.",10.1109/FUZZ-IEEE.2017.8015657
f6dc7097c06f58e93209f5cf14913c63dcfe183f,TASWEET : optimizing disjunctive regular path queries in graph databases,2017,,
cdadc2aa758d3abc1f77add07232f21df9287162,A Scalable Graph-Coarsening Based Index for Dynamic Graph Databases,2017,"A graph database D is a collection of graphs. To speed up subgraph query answering on graph databases, indexes are commonly used. State-of-the-art graph database indexes do not adapt or scale well to dynamic graph database use; they are static, and their ability to prune possible search responses to meet user needs worsens over time as databases change and grow. Users can re-mine indexes to gain some improvement, but it is time consuming. Users must also tune numerous parameters on an ongoing basis to optimize performance and can inadvertently worsen the query response time if they do not choose parameters wisely. Recently, a one-pass algorithm has been developed to enhance the performance of frequent subgraphs based indexes by using the algorithm to update them regularly. However, there are some drawbacks, most notably the need to make updates as the query workload changes. In this paper, we propose a new index based on graph-coarsening to speed up subgraph query answering time in dynamic graph databases. Our index is parameter-free, query-independent, scalable,small enough to store in the main memory, and is simpler and less costly to maintain for database updates. Experimental results show that our index outperforms hybrid-indexes (i.e. indexes updated with one-pass) for query answering time in the case of social network databases, and is comparable with these indexes for frequent and infrequent queries on chemical databases. Our index can be updated up to 60 times faster in comparison to one-pass on dynamic graph databases. Moreover, our index is independent of the query workload for index update and is up to 15 times faster after hybrid-indexes are attuned to query workload.",10.1145/3132847.3133003
a31b391917fbfc24675fc13a6724fe61460b425a,AutoG: a visual query autocompletion framework for graph databases,2016,"Composing queries is evidently a tedious task. This is particularly true of graph queries as they are typically complex and prone to errors, compounded by the fact that graph schemas can be missing or too loose to be helpful for query formulation. Despite the great success of query formulation aids, in particular, automatic query completion, graph query autocompletion has received much less research attention. In this paper, we propose a novel framework for subgraph query autocompletion (called AutoG). Given an initial query q and a user’s preference as input, AutoG returns ranked query suggestions Q′\documentclass[12pt]{minimal} \usepackage{amsmath} \usepackage{wasysym} \usepackage{amsfonts} \usepackage{amssymb} \usepackage{amsbsy} \usepackage{mathrsfs} \usepackage{upgreek} \setlength{\oddsidemargin}{-69pt} \begin{document}$$Q'$$\end{document} as output. Users may choose a query from Q′\documentclass[12pt]{minimal} \usepackage{amsmath} \usepackage{wasysym} \usepackage{amsfonts} \usepackage{amssymb} \usepackage{amsbsy} \usepackage{mathrsfs} \usepackage{upgreek} \setlength{\oddsidemargin}{-69pt} \begin{document}$$Q'$$\end{document} and iteratively apply AutoG to compose their queries. The novelties of AutoG are as follows: First, we formalize query composition. Second, we propose to increment a query with the logical units called c-prime features that are (i) frequent subgraphs and (ii) constructed from smaller c-prime features in no more than c ways. Third, we propose algorithms to rank candidate suggestions. Fourth, we propose a novel index called feature Dag (FDag) to optimize the ranking. We study the query suggestion quality with simulations and real users and conduct an extensive performance evaluation. The results show that the query suggestions are useful (saved roughly 40% of users’ mouse clicks), and AutoG returns suggestions shortly under a large variety of parameter settings.",10.1007/s00778-017-0454-9
5685a394b25fcb27b6ad91f7325f2e60a9892e2a,Query Optimization Techniques In Graph Databases,2016,"Graph databases (GDB) have recently been arisen to overcome the limits of traditional databases for storing and managing data with graph-like structure. Today, they represent a requirement for many applications that manage graph-like data, like social networks. Most of the techniques, applied to optimize queries in graph databases, have been used in traditional databases, distribution systems... or they are inspired from graph theory. However, their reuse in graph databases should take care of the main characteristics of graph databases, such as dynamic structure, highly interconnected data, and ability to efficiently access data relationships. In this paper, we survey the query optimization techniques in graph databases. In particular, we focus on the features they have introduced to improve querying graph-like data.",10.5121/ijdms.2016.8401
416292827584552604807411db7262d7c28257e6,Plan Before You Execute: A Cost-Based Query Optimizer for Attributed Graph Databases,2016,,10.1007/978-3-319-43946-4_21
9b3f2b73263ce06a6d61ef2ad9df7cce33e171f7,Application of graph databases for transport purposes,2016,*e-mail: a.czerepicki@wt.pw.edu.pl Abstract. The article presents an innovative concept of applying graph databases in transport information systems. The model of a graph database has been presented together with implementation of data structures and search operations in a graph. The transformation concept of relational model to a graph data model has been developed. The schema of graph database has been proposed for public transport information system purposes. The realization methods have been illustrated by the use of search function based on the Cypher query language.,10.1515/BPASTS-2016-0051
325bbe2c92072b16645a5cded3b9eda3cb97660b,Predictive Performance Comparison Analysis of Relational & NoSQL Graph Databases,2017,"From last three decades, the relational databases are being used in many organizations of various natures such as Education, Health, Business and in many other applications. Traditional databases show tremendous performance and are designed to handle structured data with ACID (Atomicity, Consistency, Isolation, Durability) property to manage data integrity. In the current era, organizations are storing more data i.e. videos, images, blogs, etc. besides structured data for decision making. Similarly, social media and scientific applications are generating large amount of semi-structured data of varied nature. Relational databases cannot process properly and manage such large amount of data efficiently. To overcome this problem, another paradigm NoSQL databases is introduced to manage and process massive amount of unstructured data efficiently. NoSQL databases are divided into four categories and each category is used according to the nature and need of the specific problem. In this paper we will compare Oracle relational database and NoSQL graph database using optimized queries and physical database tuning techniques. The comparison is two folded: in the first iteration we compare various kinds of queries such as simpler query, database tuning of Oracle relational database such as sub databases and perform these queries in our desired environments. Secondly, for this comparison we will perform predictive analysis for the results obtained from our experiments.",10.14569/IJACSA.2017.080564
e02acab3e0c44f425705865869f3e51f7998dd24,Towards Temporal Graph Databases,2016,"In spite of the extensive literature on graph databases (GDBs), temporal GDBs have not received too much attention so far. Temporal GBDs can capture, for example, the evolution of social networks across time, a relevant topic in data analysis nowadays. In this paper we propose a data model and query language (denoted TEG-QL) for temporal GDBs, based on the notion of attribute graphs. This allows a straightforward translation to Neo4J, a well-known GBD. We present extensive examples of the use of TEG-QL, and comment our implementation.",
02808823641975868e3212fd7ae859514fdbdf32,Integrity constraints in graph databases,2017,,10.1016/j.procs.2017.05.456
c8df841db2bfe68fc7624f004217c0255f385063,Smart RDF Data Storage in Graph Databases,2017,"Graph Database Management Systems (GDBMs) provide an effective and efficient solution to data storage in current scenarios where data are more and more connected, graph models are widely used, and systems need to scale to large data sets. In particular, the conversion of the persistent layer of an application from a RDF to a graph data store can be convenient but it is usually an hard task for database administrators. In this paper we propose a methodology to convert a RDF data store to a graph database by exploiting the ontology and the constraints of the source. We provide experimental results that show the feasibility of our solution and the efficiency of query answering over the target database.",10.1109/CCGRID.2017.108
0daa156e7b4168df25733ce58680dd15b539fa50,Generating Flexible Workloads for Graph Databases,2016,"Graph data management tools are nowadays evolving at a great pace. Key drivers of progress in the design and study of data intensive systems are solutions for synthetic generation of data and workloads, for use in empirical studies. Current graph generators, however, provide limited or no support for workload generation or are limited to fixed use-cases. Towards addressing these limitations, we demonstrate gMark, the first domain- and query language-independent framework for synthetic graph and query workload generation. Its novel features are: (i) fine-grained control of graph instance and query workload generation via expressive user-defined schemas; (ii) the support of expressive graph query languages, including recursion among other features; and, (iii) selectivity estimation of the generated queries. During the demonstration, we will showcase the highly tunable generation of graphs and queries through various user-defined schemas and targeted selectivities, and the variety of supported practical graph query languages. We will also show a performance comparison of four state-of-the-art graph database engines, which helps us understand their current strengths and desirable future extensions.",10.14778/3007263.3007283
262fe2a2b5d1c0fa7feb63f3bf0c1fd81f1b7c80,Graph Databases: Their Power and Limitations,2015,,10.1007/978-3-319-24369-6_5
acf5fce7472de410985d223d3ce1271a5014d1e7,Using Domain-Specific Languages For Analytic Graph Databases,2016,"Recently graph has been drawing lots of attention both as a natural data model that captures fine-grained relationships between data entities and as a tool for powerful data analysis that considers such relationships. In this paper, we present a new graph database system that integrates a robust graph storage with an efficient graph analytics engine. Primarily, our system adopts two domain-specific languages (DSLs), one for describing graph analysis algorithms and the other for graph pattern matching queries. Compared to the API-based approaches in conventional graph processing systems, the DSL-based approach provides users with more flexible and intuitive ways of expressing algorithms and queries. Moreover, the DSL-based approach has significant performance benefits as well, (1) by skipping (remote) API invocation overhead and (2) by applying high-level optimization from the compiler.",10.14778/3007263.3007265
45af864f2f9991eb9f9545fdec45ccf2adb5f0fa,Graph databases: A survey,2015,"In the era of big data, data analytics, business intelligence database management plays a vital role from technical business management and research point of view. Over many decades, database management has been a topic of active research. There are different type of database management system have been proposed over a period of time but Relational Database Management System (RDBMS) is the one which has been most popularly used in academic research as well as industrial setup[1]. In recent years, graph databases regained interest among the researchers for certain obvious reasons. One of the most important reasons for such an interest in a graph database is because of the inherent property of graphs as a graph structure. Graphs are present everywhere in the data structure, which represents the strong connectivity within the data. Most of the graph database models are defined in which data-structure for schema and instances are modeled as graph or generalization of a graph. In such graph database models, data manipulations are expressed by graph-oriented operations and type constructors [9]. Now days, most of the real world applications can be modeled as a graph and one of the best real world examples is social or biological network. This paper gives an overview of the different type of graph databases, applications, and comparison between their models based on some properties.",10.1109/CCAA.2015.7148480
d6b68954d6acddce319de327af65d164bdfc5543,Supervised Learning on Relational Databases with Graph Neural Networks,2020,"The majority of data scientists and machine learning practitioners use relational data in their work [State of ML and Data Science 2017, Kaggle, Inc.]. But training machine learning models on data stored in relational databases requires significant data extraction and feature engineering efforts. These efforts are not only costly, but they also destroy potentially important relational structure in the data. We introduce a method that uses Graph Neural Networks to overcome these challenges. Our proposed method outperforms state-of-the-art automatic feature engineering methods on two out of three datasets.",
71ca3a6c98c8b60117d01f324487ea8bfe34c54b,Authenticated Subgraph Similarity Searchin Outsourced Graph Databases,2015,"Subgraph similarity search is used in graph databases to retrieve graphs whose subgraphs are similar to a given query graph. It has been proven successful in a wide range of applications including bioinformatics and chem-informatics, etc. Due to the cost of providing efficient similarity search services on ever-increasing graph data, database outsourcing is apparently an appealing solution to database owners. Unfortunately, query service providers may be untrusted or compromised by attacks. To our knowledge, no studies have been carried out on the authentication of the search. In this paper, we propose authentication techniques that follow the popular filtering-and-verification framework. We propose an authentication-friendly metric index called GMTree. Specifically, we transform the similarity search into a search in a graph metric space and derive small verification objects (VOs) to-be-transmitted to query clients. To further optimize GMTree, we propose a sampling-based pivot selection method and an authenticated version of MCS computation. Our comprehensive experiments verified the effectiveness and efficiency of our proposed techniques.",10.1109/TKDE.2014.2316818
342253053f72911edc54df84708f1c1a8db279b6,Graph similarity search on large uncertain graph databases,2015,,10.1007/s00778-014-0373-y
f0c9fabba39fb5d471d6bd37f6d1c68811fef48b,DaVinci: Data-driven visual interface construction for subgraph search in graph databases,2015,"Due to the complexity of graph query languages, the need for visual query interfaces that can reduce the burden of query formulation is fundamental to the spreading of graph data management tools to a wider community. Despite the significant progress towards building such query interfaces to simplify visual subgraph query formulation task, construction of current generation visual interfaces is not data-driven. That is, it does not exploit the underlying data graphs to automatically generate the contents of various panels in the interface. Such data-driven construction has several benefits such as superior support for subgraph query formulation and portability of the interface across different graph databases. In this demonstration, we present a novel data-driven visual subgraph query interface construction engine called DaVinci. Specifically, it automatically generates from the underlying database two key components of the visual interface to aid subgraph query formulation, namely canned patterns and node labels.",10.1109/ICDE.2015.7113411
5b0ade1a2ae06e9d8b51f2d5c424a0cdad847e8a,EVALUATION OF GRAPH DATABASES PERFORMANCE THROUGH INDEXING TECHNIQUES,2015,"The aim of this paper is to evaluate , through indexing techniques, the performance of Neo4j and OrientDB, both graph databases technologies and to come up with strength and weaknesses os each technology as a candidate for a storage mechanism of a graph structure. An index is a data structure that makes the searching faster for a specific node in concern of graph databases. The referred data structure is habitually a B-tree, however, can be a hash table or some other logic structure as well. The pivotal point of having an index is to speed up search queries, primarily by reducing the number of nodes in a graph or table to be examined. Graphs and graph databases are more commonly associated with social networking or “graph search” style recommendations. Thus, these technologies remarkably are a core technology platform for some Internet giants like Hi5, Facebook, Google, Badoo, Twitter and LinkedIn. The key to understanding graph database systems, in the social networking context, is they give equal prominence to storing both the data (users, favorites) and the relationships between them (who liked what, who ‘follows’ whom, which post was liked the most, what is the shortest path to ‘reach’ who). By a suitable application case study, in case a Twitter social networking of almost 5,000 nodes imported in local servers (Neo4j and Orient-DB), one queried to retrieval the node with the searched data, first without index (full scan), and second with index, aiming at comparing the response time (statement query time) of the aforementioned graph databases and find out which of them has a better performance (the speed of data or information retrieval) and in which case. Thereof, the main results are presented in the section 6.",10.5121/ijaia.2015.6506
ae63486b2791b301ea4f31b654579687b2f2f95a,SQL2Neo: Moving health-care data from relational to graph databases,2015,"De-facto storage model being used by health-care information systems is Relational Database Management Systems (RDBMS). Albeit relational storage model is mature and widely used; they are incompetent to store and query data encompassing high degree of relationships. Health-care data is heavily annotated with relationships and hence are a suitable candidate for a specialized data model - Graph databases. Graph databases will empower health-care professionals to discover and manage new and useful relationships and also provides speed when querying highly-related data. To query related data, relational databases employ massive joins which are very expensive, in contrast graph data-stores have direct pointers to their adjacent nodes. Hence achieving much needed scalability to handle huge amount of medical data being generated at a very high velocity. Also, healthcare data is primarily semi/un-structured - inciting the need of a schema-less database. In this proposal a methodology to convert a relational to a graph database by exploiting the schema and the constraints of the source, is proposed. The approach supports the translation of conjunctive SQL queries over the source into graph traversal operations over the target. The experimental results are provided to show the feasibility of the solution and the efficiency of query answering over the target database. Tuples are mapped to nodes and foreign key is mapped into edges. Software have been implemented in Java to convert a sample medical relational database with 24 tables to a graph database. During transformation, constraints were preserved. MySQL as relational database and popular graph database - Neo4j was used for the implementation of proposed system - SQL2Neo.",10.1109/IADCC.2015.7154801
575c8ee3782f37dd0e7df8b9f3161ae3e7783b1c,Query Processing and Optimization in Graph Databases,2015,,
8f6e3b466c4ecc6e0ff779e58cf1b885c7b09f11,Exploiting RDF Open Data Using NoSQL Graph Databases,2015,,10.1007/978-3-319-23868-5_13
2529bb021fda27e1b4012ea62d68c26fd53efcd3,Learning Path Queries on Graph Databases,2015,"We investigate the problem of learning graph queries by exploiting user examples. The input consists of a graph database in which the user has labeled a few nodes as positive or negative examples, depending on whether or not she would like the nodes as part of the query result. Our goal is to handle such examples to find a query whose output is what the user expects. This kind of scenario is pivotal in several application settings where unfamiliar users need to be assisted to specify their queries. In this paper, we focus on path queries defined by regular expressions, we identify fundamental difficulties of our problem setting, we formalize what it means to be learnable, and we prove that the class of queries under study enjoys this property. We additionally investigate an interactive scenario where we start with an empty set of examples and we identify the informative nodes i.e., those that contribute to the learning process. Then, we ask the user to label these nodes and iterate the learning process until she is satisfied with the learned query. Finally, we present an experimental study on both real and synthetic datasets devoted to gauging the effectiveness of our learning algorithm and the improvement of the interactive approach.",10.5441/002/edbt.2015.11
ff784e951325b54f911c3c82bde5b3d6810459c3,Hermes: Dynamic Partitioning for Distributed Social Network Graph Databases,2015,"Social networks are large graphs that require multiple graph database servers to store and manage them. Each database server hosts a graph partition with the objectives of balancing server loads, reducing remote traversals (edge-cuts), and adapting the partitioning to changes in the structure of the graph in the face of changing workloads. To achieve these objectives, a dynamic repartitioning algorithm is required to modify an existing partitioning to maintain good quality partitions while not imposing a significant overhead to the system. In this paper, we introduce a lightweight repartitioner, which dynamically modifies a partitioning using a small amount of resources. In contrast to the existing repartitioning algorithms, our lightweight repartitioner is e cient, making it suitable for use in a real system. We integrated our lightweight repartitioner into Hermes, which we designed as an extension of the open source Neo4j graph database system, to support workloads over partitioned graph data distributed over multiple servers. Using real-world social network data, we show that Hermes leverages the lightweight repartitioner to maintain high quality partitions and provides a 2 to 3 times performance improvement over the de-facto standard random hash-based partitioning.",10.5441/002/edbt.2015.04
3b3df8387a7924c966c87662d4d2547e5c0fb662,Extracting Fuzzy Summaries from NoSQL Graph Databases,2015,,10.1007/978-3-319-26154-6_15
2aac97b85bfb33c0bae35be23b02238c79a937d7,Experiences in WordNet Visualization with Labeled Graph Databases,2015,,10.1007/978-3-319-52758-1_6
217c25a7dc4380f12497edf4d7d013d11195c005,Microblogging Queries on Graph Databases: An Introspection,2015,"Microblogging data is growing at a rapid pace. This poses new challenges to the data management systems, such as graph databases, that are typically suitable for analyzing such data. In this paper, we share our experience on executing a wide variety of micro-blogging queries on two popular graph databases: Neo4j and Sparksee. Our queries are designed to be relevant to popular applications of micro-blogging data. The queries are executed on a large real graph data set comprising of nearly 50 million nodes and 326 million edges.",10.1145/2764947.2764952
0e9882f5d9a4c0ee873f7806ffe645b0473377a7,Interactive Path Query Specification on Graph Databases,2015,"Graph databases are becoming pervasive in several application scenarios such as the Semantic Web, social and biological networks, and geographical databases, to name a few. However, specifying a graph query is a cumbersome task for non-expert users because graph databases (i) are usually of large size hence difficult to visualize and (ii) do not carry proper metadata as there is no clear distinction between the instances and the schemas. We present GPS, a system for interactive path query specification on graph databases, which assists the user to specify path queries defined by regular expressions. The user is interactively asked to visualize small fragments of the graph and to label nodes of interest as positive or negative, depending on whether or not she would like the nodes as part of the query result. After each interaction, the system prunes the uninformative nodes i.e., those that do not add any information about the user's goal query. Thus, the system also guides the user to specify her goal query with a minimal number of interactions.",10.5441/002/dbt.2015.44
a5170eb87547140ee2e9d89e12e49e64b5f1f7d5,Controlling Diversity in Benchmarking Graph Databases,2015,,
0073395c4fec448b21963cf06ab01b671ccaaac3,Kojaph: Visual Definition and Exploration of Patterns in Graph Databases,2015,,10.1007/978-3-319-27261-0_23
205d1d5689f7327d909f6a4addb2f0d98ab7d17e,In-Memory Graph Databases for Web-Scale Data,2015,"A software stack relies primarily on graph-based methods to implement scalable resource description framework databases on top of commodity clusters, providing an inexpensive way to extract meaning from volumes of heterogeneous data.",10.1109/MC.2015.74
6300cd54e6ae992d87cb22ce536aa99a5f9e6ab4,A performance evaluation of open source graph databases,2014,"With the proliferation of large, irregular, and sparse relational datasets, new storage and analysis platforms have arisen to fill gaps in performance and capability left by conventional approaches built on traditional database technologies and query languages. Many of these platforms apply graph structures and analysis techniques to enable users to ingest, update, query, and compute on the topological structure of the network represented as sets of edges relating sets of vertices. To store and process Facebook-scale datasets, software and algorithms must be able to support data sources with billions of edges, update rates of millions of updates per second, and complex analysis kernels. These platforms must provide intuitive interfaces that enable graph experts and novice programmers to write implementations of common graph algorithms. In this paper, we conduct a qualitative study and a performance comparison of 12 open source graph databases using four fundamental graph algorithms on networks containing up to 256 million edges.",10.1145/2567634.2567638
6008ea0ff9406834436c2ab39dca17390f978a23,Model-Driven Design of Graph Databases,2014,,10.1007/978-3-319-12206-9_14
212d1c7cfad4d8dae39deb669337cb46b0274d78,Fuzzy Queries over NoSQL Graph Databases: Perspectives for Extending the Cypher Language,2014,,10.1007/978-3-319-08852-5_40
